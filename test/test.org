#+FILETAGS: :verb:

* Testing Endpoints
# Make some requests against the test server (server.py) The requests
# are executed programatically by loading this file, moving to a
# heading and executing verb-execute-request-on-point. See verb-test.el
# for more details.

template http://localhost:8000

** basic
get /basic

** basic-json
get /basic-json
** keywords-json
get /keywords-json
** stored
:properties:
:Verb-Store: foobar
:end:
get /basic
** error-400
get /error-400

** error-401
get /error-401

** headers
get /headers-test

** error-404
get /this-endpoint-doesnt-exist

** error-405
put /basic-json

** response-latin-1
get /response-latin-1

** request-latin-1
post /request-latin-1
Content-Type: text/plain; charset=latin1

áéíóúñü
** request-utf-8-default
# No set charset=
post /request-utf-8-default
Content-Type: text/plain

áéíóúñü
** request-utf-8-default-2
# No set Content-Type
post /request-utf-8-default-2

áéíóúñü
** response-utf-8-default
get /response-utf-8-default

** response-big5
get /response-big5

** root-with-args
get ?foo=bar

** redirect-302
get /redirect-302

** redirect-301
get /redirect-301

** redirect-308
post /redirect-308

** no-user-agent
get /no-user-agent

** content-length-1
post /content-length

hello
** content-length-2
post /content-length

áéíóú
test
** zero-bytes-json
get /zero-bytes-json
** sorted-headers
post /sorted-headers

foobar
*** accept-sorted-headers
template
accept: hello-world
ACCEPT: hello-world2
*** repeated-sorted-headers
template
MIME-Version: foobar
** image
get /image.png
** upload-image
post /body-md5
Content-Type: image/png

{{(verb-read-file "image.png" 'binary)}}
** upload-binary
post /body-md5

{{(verb-read-file "test.bin" 'binary)}}
** not-compressed
get /not-compressed
** set-cookies
get /set-cookies?foo=bar&abc=123
** get-cookies
get /get-cookies
** delete-cookies
get /delete-cookies?foo=t&abc=t
** get-with-body
get /basic
Content-Type: text/plain

Foobar
** repeated-args
get /echo-args?a=1&a=2&a=3&b=42
** utf-8-request-with-accept
post /echo
Accept: application/json
Content-Type: application/json; charset=utf-8

語
** form-urlencoded
get /form-urlencoded
Content-Type: application/x-www-form-urlencoded

hello=world&foo=%7B%22test%22%3A123%7D
** multipart
:properties:
:Verb-Map-Request: verb-body-lf-to-crlf
:end:
get /multipart
Content-Type: multipart/form-data; boundary={{(verb-boundary)}}

{{(verb-part "foo1")}}
Content-Type: text/plain

bar1
{{(verb-part "foo2")}}
Content-Type: application/xml

bar2
{{(verb-part)}}
* connection-fail-port
# Valid host but invalid port
get http://localhost:1234/test
* connection-fail-host
# Invalid host
get http://foobarfoobarfoobarfoobarabcdefg/test
